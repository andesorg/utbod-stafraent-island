/* tslint:disable */
/* eslint-disable */
/**
 * Thjodskra dotnet api
 * DotNet api for thjodskra
 *
 * The version of the OpenAPI document: 2021-08-17 12:44:04UTC
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    SSN: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    Name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    Address?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    PostalCode?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    City?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    Email?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    Phone?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    Children?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse200
     */
    Spouse?: Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} sSN SSN of citizen to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citizenSSNGet: async (sSN: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sSN' is not null or undefined
            assertParamExists('citizenSSNGet', 'sSN', sSN)
            const localVarPath = `/citizen/{SSN}`
                .replace(`{${"SSN"}}`, encodeURIComponent(String(sSN)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} sSN SSN of citizen to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async citizenSSNGet(sSN: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.citizenSSNGet(sSN, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} sSN SSN of citizen to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        citizenSSNGet(sSN: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.citizenSSNGet(sSN, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} sSN SSN of citizen to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public citizenSSNGet(sSN: string, options?: any) {
        return DefaultApiFp(this.configuration).citizenSSNGet(sSN, options).then((request) => request(this.axios, this.basePath));
    }
}


